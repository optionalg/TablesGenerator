// This code automatically generated by TableCodeGen
//using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System;
using System.Reflection;
using System.IO;

public class GlobeTable
{
    //public TextAsset csv;
    //WPM.WorldMapGlobe map;
    public static string getCreateTableFields(Type type)
    {
        string result = "";
        FieldInfo[] myField = type.GetFields();
        for (int i = 0; i < myField.Length; i++)
        {
            string fieldName = myField[i].Name;
            Type fieldType = myField[i].FieldType;
            if (fieldType == typeof(string))
            {
                result += myField[i].Name + " nvarchar(100),";//\n";
            }
            else if (fieldType == typeof(BestSite))
            {
                result += getCreateTableFields(fieldType);
            }
        }
        return result;
    }
    public static string GenerateCreateTableQuery(Type type, string tableName = "table4")
    {
        string result = "CREATE TABLE " + tableName + " (";
        result += getCreateTableFields(type);
        result=result.TrimEnd(new char[] { ',' });
        result += ");";
        return result;
    }



    [System.Serializable]
    public class BestSite
    {
        public string BestSiteGUID;
        public string BestSiteGUName;
        public string BestSiteTargetID;
        public string BestSiteTargetName;
        public string BestSiteID;
        public string BestSiteName;
        public string BestSiteAddress1;
        public string BestSiteAddress2;
        public string BestSiteAddress3;
        public string BestSiteAddress4;
        public string BestSiteCity;
        public string BestSiteState;
        public string BestSiteCountry;
        public string BestSiteTheater;
    }

    internal void setFileName(string fileName)
    {
        this.fileName = fileName;
    }

    [System.Serializable]
    public class Row
    {
        public string SerialNumber;
        public string ProductID;
        public string ProductDescription;
        public string ProductFamily;
        public string ProductType;
        public string TechnologyGroup;
        public string TechnologyGroupDescription;

        public string DefaultServiceList;
        public string SKUList;
        public string WarrantyType;
        public string WarrantyEndDate;
        public string WarrantyEndDateFQ;
        public string WarrantyEndDateFY;
        public string EndofProductSaleDate;
        public string EndofNewServiceAttachDate;
        public string LastRenewalDate;
        public string LDoS;
        public string LDoSFQ;
        public string LDoSFY;
        public BestSite bestSite;
        public string ContractNo;
        public string ContractType;
        public string ServiceLevelRollup;
        public string Coverage;
        public string CoveredLineStatus;
        public string CoveredLineStartDate;
        public string CoveredLineEndDate;
        public string CoveredLineEndDateFQ;
        public string CoveredLineEndDateFY;
        public string ServiceBilltoGUCompanyTargetID;
        public string ServiceBilltoGUCompanyName;
        public string ServiceBilltoCSCCompanyTargetID;
        public string ServiceBilltoCSCCompanyTargetName;
        public string ServiceBilltoCustomerID;
        public string ServiceBilltoID;
        public string ServiceBilltoName;
        public string ServicePO;
        public string ServiceSO;
        public string ServiceSalesRegion;
        public string ProductBilltoGUCompanyTargetID;
        public string ProductBilltoGUCompanyName;
        public string ProductBilltoCSCCompanyTargetID;
        public string ProductBilltoCSCCompanyTargetName;
        public string ProductBilltoCustomerID;
        public string ProductBilltoID;
        public string ProductBilltoName;
        public string ProductPO;
        public string ProductSO;
        public string ShippedDate;
        public string ShippedDateFQ;
        public string ShippedDateFY;
        public string ShiptoGUTargetID;
        public string ShiptoGUName;
        public string ShiptoCSCCompanyTargetID;
        public string ShiptoCSCCompanyTargetName;
        public string ShiptoSiteID;
        public string ShiptoSiteName;
        public string ShiptoAddress1;
        public string ShiptoAddress2;
        public string ShiptoAddress3;
        public string ShiptoAddress4;
        public string ShiptoCity;
        public string ShiptoState;
        public string ShiptoPostalCode;
        public string ShiptoCountry;
        public string ShiptoTheater;
        public string KTNNetworkCollected;
        public string KTNEngagementID;
        public string KTNEngagementStart;
        public string KTNCoverageStatus;
        public string KTNCPLStartDate;
        public string KTNCPLEndDate;
        public string InvalidSNReason;
        public string InstanceID;
        public string InstanceCreationDateFiscalYear;
        public string CPLID;
        


    }

    internal string getInsertInto()
    {
        return insertInto;
    }

    internal List<string> GetInsertValues()
    {
        return insertValuesList;
    }

    string insertInto;
    List<string> insertValuesList = new List<string>();
    List<Row> rowList = new List<Row>();
    List<BestSite> bestSiteList = new List<BestSite>();
    bool isLoaded = false;
    private string fileName;

    public void Awake()
    {
        //Load();
    }

    public bool IsLoaded()
    {
        return isLoaded;
    }

    public List<Row> GetRowList()
    {
        return rowList;
    }

    public List<BestSite> GetBestSiteList()
    {
        return bestSiteList;
    }

    public void Load()
    {
        String csvPath = fileName;
        rowList.Clear();
        bestSiteList.Clear();
        TextReader reader = File.OpenText(csvPath);
        //StreamReader sr = new StreamReader(@csvPath);
        string tempString = "";
        tempString = reader.ReadLine();
        insertInto = "INSERT INTO row1 (";
        string[][] grid = CsvParser2.Parse(tempString);
        for (int j = 0; j <= 88; j++)
        {
            insertInto += grid[0][j] + ",";
        }
        insertInto = insertInto.TrimEnd(new char[] { ',' });
        insertInto += ")";
        tempString = reader.ReadLine();
        int i=0;
        while (null != tempString) {
             grid = CsvParser2.Parse(tempString);
            i++;

            //for (int i = 1; i < grid.Length; i++)
            {
                string insertValues = "VALUES (";
                for (int j = 0; j <= 88; j++)
                {
                    insertValues += "'" + grid[0][j] + "',";
                }
                insertValues = insertValues.TrimEnd(new char[] { ',' });
                insertValues += ");";
                insertValuesList.Add(insertValues);
                if (i % 10000 == 0)
                {
                    Console.WriteLine(i + " rows loaded");
                }
                
                /*
                Row row = new Row();
                row.SerialNumber = grid[i][0];
                row.ProductID = grid[i][1];
                row.ProductDescription = grid[i][2];
                row.ProductFamily = grid[i][3];
                row.ProductType = grid[i][4];
                row.TechnologyGroup = grid[i][5];
                row.TechnologyGroupDescription = grid[i][6];
                row.DefaultServiceList = grid[i][7];
                row.SKUList = grid[i][8];
                row.WarrantyType = grid[i][9];
                row.WarrantyEndDate = grid[i][10];
                row.WarrantyEndDateFQ = grid[i][11];
                row.WarrantyEndDateFY = grid[i][12];
                row.EndofProductSaleDate = grid[i][13];
                row.EndofNewServiceAttachDate = grid[i][14];
                row.LastRenewalDate = grid[i][15];
                row.LDoS = grid[i][16];
                row.LDoSFQ = grid[i][17];
                row.LDoSFY = grid[i][18];

                if (bestSiteList.Exists(x => x.BestSiteID == grid[i][23]))
                {
                    row.bestSite = bestSiteList.Find(x => x.BestSiteID == grid[i][23]);
                }
                else
                {
                    BestSite bs = new BestSite();
                    bs.BestSiteGUID = grid[i][19];
                    bs.BestSiteGUName = grid[i][20];
                    bs.BestSiteTargetID = grid[i][21];
                    bs.BestSiteTargetName = grid[i][22];
                    bs.BestSiteID = grid[i][23];
                    bs.BestSiteName = grid[i][24];
                    bs.BestSiteAddress1 = grid[i][25];
                    bs.BestSiteAddress2 = grid[i][26];
                    bs.BestSiteAddress3 = grid[i][27];
                    bs.BestSiteAddress4 = grid[i][28];
                    bs.BestSiteCity = grid[i][29];
                    bs.BestSiteState = grid[i][30];
                    bs.BestSiteCountry = grid[i][31];
                    bs.BestSiteTheater = grid[i][32];
                    bestSiteList.Add(bs);
                    row.bestSite = bs;
                }

                //Set date for city
                map = WPM.WorldMapGlobe.instance;
                int index = map.GetCityIndex(grid[i][29]);
                System.DateTime temp_date;
                if (index != null && index > 1)
                {
                    if (row.LDoS == "<NULL>")
                    {
                        if (map.cities[index].date == System.DateTime.MaxValue)
                            map.cities[index].date = System.DateTime.MinValue;
                    }
                    else
                    {
                        temp_date = System.DateTime.ParseExact(row.LDoS, "yyyy-MM-dd", null);
                        if (map.cities[index].date > temp_date || map.cities[index].date == System.DateTime.MinValue)
                        {
                            map.cities[index].date = temp_date;
                        }
                    }
                }

                row.ContractNo = grid[i][33];
                row.ContractType = grid[i][34];
                row.ServiceLevelRollup = grid[i][35];
                row.Coverage = grid[i][36];
                row.CoveredLineStatus = grid[i][37];
                row.CoveredLineStartDate = grid[i][38];
                row.CoveredLineEndDate = grid[i][39];
                row.CoveredLineEndDateFQ = grid[i][40];
                row.CoveredLineEndDateFY = grid[i][41];
                row.ServiceBilltoGUCompanyTargetID = grid[i][42];
                row.ServiceBilltoGUCompanyName = grid[i][43];
                row.ServiceBilltoCSCCompanyTargetID = grid[i][44];
                row.ServiceBilltoCSCCompanyTargetName = grid[i][45];
                row.ServiceBilltoCustomerID = grid[i][46];
                row.ServiceBilltoID = grid[i][47];
                row.ServiceBilltoName = grid[i][48];
                row.ServicePO = grid[i][49];
                row.ServiceSO = grid[i][50];
                row.ServiceSalesRegion = grid[i][51];
                row.ProductBilltoGUCompanyTargetID = grid[i][52];
                row.ProductBilltoGUCompanyName = grid[i][53];
                row.ProductBilltoCSCCompanyTargetID = grid[i][54];
                row.ProductBilltoCSCCompanyTargetName = grid[i][55];
                row.ProductBilltoCustomerID = grid[i][56];
                row.ProductBilltoID = grid[i][57];
                row.ProductBilltoName = grid[i][58];
                row.ProductPO = grid[i][59];
                row.ProductSO = grid[i][60];
                row.ShippedDate = grid[i][61];
                row.ShippedDateFQ = grid[i][62];
                row.ShippedDateFY = grid[i][63];
                row.ShiptoGUTargetID = grid[i][64];
                row.ShiptoGUName = grid[i][65];
                row.ShiptoCSCCompanyTargetID = grid[i][66];
                row.ShiptoCSCCompanyTargetName = grid[i][67];
                row.ShiptoSiteID = grid[i][68];
                row.ShiptoSiteName = grid[i][69];
                row.ShiptoAddress1 = grid[i][70];
                row.ShiptoAddress2 = grid[i][71];
                row.ShiptoAddress3 = grid[i][72];
                row.ShiptoAddress4 = grid[i][73];
                row.ShiptoCity = grid[i][74];
                row.ShiptoState = grid[i][75];
                row.ShiptoPostalCode = grid[i][76];
                row.ShiptoCountry = grid[i][77];
                row.ShiptoTheater = grid[i][78];
                row.KTNNetworkCollected = grid[i][79];
                row.KTNEngagementID = grid[i][80];
                row.KTNEngagementStart = grid[i][81];
                row.KTNCoverageStatus = grid[i][82];
                row.KTNCPLStartDate = grid[i][83];
                row.KTNCPLEndDate = grid[i][84];
                row.InvalidSNReason = grid[i][85];
                row.InstanceID = grid[i][86];
                row.InstanceCreationDateFiscalYear = grid[i][87];
                row.CPLID = grid[i][88];


                rowList.Add(row);
                */
            }
            tempString = reader.ReadLine();
        }
        isLoaded = true;
    }

    public int NumRows()
    {
        return rowList.Count;
    }

    public Row GetAt(int i)
    {
        if (rowList.Count <= i)
            return null;
        return rowList[i];
    }

    public Row Find_SerialNumber(string find)
    {
        return rowList.Find(x => x.SerialNumber == find);
    }
    public List<Row> FindAll_SerialNumber(string find)
    {
        return rowList.FindAll(x => x.SerialNumber == find);
    }
    public Row Find_ProductID(string find)
    {
        return rowList.Find(x => x.ProductID == find);
    }
    public List<Row> FindAll_ProductID(string find)
    {
        return rowList.FindAll(x => x.ProductID == find);
    }
    public Row Find_ProductDescription(string find)
    {
        return rowList.Find(x => x.ProductDescription == find);
    }
    public List<Row> FindAll_ProductDescription(string find)
    {
        return rowList.FindAll(x => x.ProductDescription == find);
    }
    public Row Find_ProductFamily(string find)
    {
        return rowList.Find(x => x.ProductFamily == find);
    }
    public List<Row> FindAll_ProductFamily(string find)
    {
        return rowList.FindAll(x => x.ProductFamily == find);
    }
    public Row Find_ProductType(string find)
    {
        return rowList.Find(x => x.ProductType == find);
    }
    public List<Row> FindAll_ProductType(string find)
    {
        return rowList.FindAll(x => x.ProductType == find);
    }
    public Row Find_TechnologyGroup(string find)
    {
        return rowList.Find(x => x.TechnologyGroup == find);
    }
    public List<Row> FindAll_TechnologyGroup(string find)
    {
        return rowList.FindAll(x => x.TechnologyGroup == find);
    }
    public Row Find_TechnologyGroupDescription(string find)
    {
        return rowList.Find(x => x.TechnologyGroupDescription == find);
    }
    public List<Row> FindAll_TechnologyGroupDescription(string find)
    {
        return rowList.FindAll(x => x.TechnologyGroupDescription == find);
    }
    public Row Find_DefaultServiceList(string find)
    {
        return rowList.Find(x => x.DefaultServiceList == find);
    }
    public List<Row> FindAll_DefaultServiceList(string find)
    {
        return rowList.FindAll(x => x.DefaultServiceList == find);
    }
    public Row Find_SKUList(string find)
    {
        return rowList.Find(x => x.SKUList == find);
    }
    public List<Row> FindAll_SKUList(string find)
    {
        return rowList.FindAll(x => x.SKUList == find);
    }
    public Row Find_WarrantyType(string find)
    {
        return rowList.Find(x => x.WarrantyType == find);
    }
    public List<Row> FindAll_WarrantyType(string find)
    {
        return rowList.FindAll(x => x.WarrantyType == find);
    }
    public Row Find_WarrantyEndDate(string find)
    {
        return rowList.Find(x => x.WarrantyEndDate == find);
    }
    public List<Row> FindAll_WarrantyEndDate(string find)
    {
        return rowList.FindAll(x => x.WarrantyEndDate == find);
    }
    public Row Find_WarrantyEndDateFQ(string find)
    {
        return rowList.Find(x => x.WarrantyEndDateFQ == find);
    }
    public List<Row> FindAll_WarrantyEndDateFQ(string find)
    {
        return rowList.FindAll(x => x.WarrantyEndDateFQ == find);
    }
    public Row Find_WarrantyEndDateFY(string find)
    {
        return rowList.Find(x => x.WarrantyEndDateFY == find);
    }
    public List<Row> FindAll_WarrantyEndDateFY(string find)
    {
        return rowList.FindAll(x => x.WarrantyEndDateFY == find);
    }
    public Row Find_EndofProductSaleDate(string find)
    {
        return rowList.Find(x => x.EndofProductSaleDate == find);
    }
    public List<Row> FindAll_EndofProductSaleDate(string find)
    {
        return rowList.FindAll(x => x.EndofProductSaleDate == find);
    }
    public Row Find_EndofNewServiceAttachDate(string find)
    {
        return rowList.Find(x => x.EndofNewServiceAttachDate == find);
    }
    public List<Row> FindAll_EndofNewServiceAttachDate(string find)
    {
        return rowList.FindAll(x => x.EndofNewServiceAttachDate == find);
    }
    public Row Find_LastRenewalDate(string find)
    {
        return rowList.Find(x => x.LastRenewalDate == find);
    }
    public List<Row> FindAll_LastRenewalDate(string find)
    {
        return rowList.FindAll(x => x.LastRenewalDate == find);
    }
    public Row Find_LDoS(string find)
    {
        return rowList.Find(x => x.LDoS == find);
    }
    public List<Row> FindAll_LDoS(string find)
    {
        return rowList.FindAll(x => x.LDoS == find);
    }
    public Row Find_LDoSFQ(string find)
    {
        return rowList.Find(x => x.LDoSFQ == find);
    }
    public List<Row> FindAll_LDoSFQ(string find)
    {
        return rowList.FindAll(x => x.LDoSFQ == find);
    }
    public Row Find_LDoSFY(string find)
    {
        return rowList.Find(x => x.LDoSFY == find);
    }
    public List<Row> FindAll_LDoSFY(string find)
    {
        return rowList.FindAll(x => x.LDoSFY == find);
    }
    public Row Find_BestSiteGUID(string find)
    {
        return rowList.Find(x => x.bestSite.BestSiteGUID == find);
    }
    public List<Row> FindAll_BestSiteGUID(string find)
    {
        return rowList.FindAll(x => x.bestSite.BestSiteGUID == find);
    }
    public Row Find_BestSiteGUName(string find)
    {
        return rowList.Find(x => x.bestSite.BestSiteGUName == find);
    }
    public List<Row> FindAll_BestSiteGUName(string find)
    {
        return rowList.FindAll(x => x.bestSite.BestSiteGUName == find);
    }
    public Row Find_BestSiteTargetID(string find)
    {
        return rowList.Find(x => x.bestSite.BestSiteTargetID == find);
    }
    public List<Row> FindAll_BestSiteTargetID(string find)
    {
        return rowList.FindAll(x => x.bestSite.BestSiteTargetID == find);
    }
    public Row Find_BestSiteTargetName(string find)
    {
        return rowList.Find(x => x.bestSite.BestSiteTargetName == find);
    }
    public List<Row> FindAll_BestSiteTargetName(string find)
    {
        return rowList.FindAll(x => x.bestSite.BestSiteTargetName == find);
    }
    public Row Find_BestSiteID(string find)
    {
        return rowList.Find(x => x.bestSite.BestSiteID == find);
    }
    public List<Row> FindAll_BestSiteID(string find)
    {
        return rowList.FindAll(x => x.bestSite.BestSiteID == find);
    }
    public Row Find_BestSiteName(string find)
    {
        return rowList.Find(x => x.bestSite.BestSiteName == find);
    }
    public List<Row> FindAll_BestSiteName(string find)
    {
        return rowList.FindAll(x => x.bestSite.BestSiteName == find);
    }
    public Row Find_BestSiteAddress1(string find)
    {
        return rowList.Find(x => x.bestSite.BestSiteAddress1 == find);
    }
    public List<Row> FindAll_BestSiteAddress1(string find)
    {
        return rowList.FindAll(x => x.bestSite.BestSiteAddress1 == find);
    }
    public Row Find_BestSiteAddress2(string find)
    {
        return rowList.Find(x => x.bestSite.BestSiteAddress2 == find);
    }
    public List<Row> FindAll_BestSiteAddress2(string find)
    {
        return rowList.FindAll(x => x.bestSite.BestSiteAddress2 == find);
    }
    public Row Find_BestSiteAddress3(string find)
    {
        return rowList.Find(x => x.bestSite.BestSiteAddress3 == find);
    }
    public List<Row> FindAll_BestSiteAddress3(string find)
    {
        return rowList.FindAll(x => x.bestSite.BestSiteAddress3 == find);
    }
    public Row Find_BestSiteAddress4(string find)
    {
        return rowList.Find(x => x.bestSite.BestSiteAddress4 == find);
    }
    public List<Row> FindAll_BestSiteAddress4(string find)
    {
        return rowList.FindAll(x => x.bestSite.BestSiteAddress4 == find);
    }
    public Row Find_BestSiteCity(string find)
    {
        return rowList.Find(x => x.bestSite.BestSiteCity == find);
    }
    public List<Row> FindAll_BestSiteCity(string find)
    {
        return rowList.FindAll(x => x.bestSite.BestSiteCity == find);
    }
    public Row Find_BestSiteState(string find)
    {
        return rowList.Find(x => x.bestSite.BestSiteState == find);
    }
    public List<Row> FindAll_BestSiteState(string find)
    {
        return rowList.FindAll(x => x.bestSite.BestSiteState == find);
    }
    public Row Find_BestSiteCountry(string find)
    {
        return rowList.Find(x => x.bestSite.BestSiteCountry == find);
    }
    public List<Row> FindAll_BestSiteCountry(string find)
    {
        return rowList.FindAll(x => x.bestSite.BestSiteCountry == find);
    }
    public Row Find_BestSiteTheater(string find)
    {
        return rowList.Find(x => x.bestSite.BestSiteTheater == find);
    }
    public List<Row> FindAll_BestSiteTheater(string find)
    {
        return rowList.FindAll(x => x.bestSite.BestSiteTheater == find);
    }
    public Row Find_ContractNo(string find)
    {
        return rowList.Find(x => x.ContractNo == find);
    }
    public List<Row> FindAll_ContractNo(string find)
    {
        return rowList.FindAll(x => x.ContractNo == find);
    }
    public Row Find_ContractType(string find)
    {
        return rowList.Find(x => x.ContractType == find);
    }
    public List<Row> FindAll_ContractType(string find)
    {
        return rowList.FindAll(x => x.ContractType == find);
    }
    public Row Find_ServiceLevelRollup(string find)
    {
        return rowList.Find(x => x.ServiceLevelRollup == find);
    }
    public List<Row> FindAll_ServiceLevelRollup(string find)
    {
        return rowList.FindAll(x => x.ServiceLevelRollup == find);
    }
    public Row Find_Coverage(string find)
    {
        return rowList.Find(x => x.Coverage == find);
    }
    public List<Row> FindAll_Coverage(string find)
    {
        return rowList.FindAll(x => x.Coverage == find);
    }
    public Row Find_CoveredLineStatus(string find)
    {
        return rowList.Find(x => x.CoveredLineStatus == find);
    }
    public List<Row> FindAll_CoveredLineStatus(string find)
    {
        return rowList.FindAll(x => x.CoveredLineStatus == find);
    }
    public Row Find_CoveredLineStartDate(string find)
    {
        return rowList.Find(x => x.CoveredLineStartDate == find);
    }
    public List<Row> FindAll_CoveredLineStartDate(string find)
    {
        return rowList.FindAll(x => x.CoveredLineStartDate == find);
    }
    public Row Find_CoveredLineEndDate(string find)
    {
        return rowList.Find(x => x.CoveredLineEndDate == find);
    }
    public List<Row> FindAll_CoveredLineEndDate(string find)
    {
        return rowList.FindAll(x => x.CoveredLineEndDate == find);
    }
    public Row Find_CoveredLineEndDateFQ(string find)
    {
        return rowList.Find(x => x.CoveredLineEndDateFQ == find);
    }
    public List<Row> FindAll_CoveredLineEndDateFQ(string find)
    {
        return rowList.FindAll(x => x.CoveredLineEndDateFQ == find);
    }
    public Row Find_CoveredLineEndDateFY(string find)
    {
        return rowList.Find(x => x.CoveredLineEndDateFY == find);
    }
    public List<Row> FindAll_CoveredLineEndDateFY(string find)
    {
        return rowList.FindAll(x => x.CoveredLineEndDateFY == find);
    }
    public Row Find_ServiceBilltoGUCompanyTargetID(string find)
    {
        return rowList.Find(x => x.ServiceBilltoGUCompanyTargetID == find);
    }
    public List<Row> FindAll_ServiceBilltoGUCompanyTargetID(string find)
    {
        return rowList.FindAll(x => x.ServiceBilltoGUCompanyTargetID == find);
    }
    public Row Find_ServiceBilltoGUCompanyName(string find)
    {
        return rowList.Find(x => x.ServiceBilltoGUCompanyName == find);
    }
    public List<Row> FindAll_ServiceBilltoGUCompanyName(string find)
    {
        return rowList.FindAll(x => x.ServiceBilltoGUCompanyName == find);
    }
    public Row Find_ServiceBilltoCSCCompanyTargetID(string find)
    {
        return rowList.Find(x => x.ServiceBilltoCSCCompanyTargetID == find);
    }
    public List<Row> FindAll_ServiceBilltoCSCCompanyTargetID(string find)
    {
        return rowList.FindAll(x => x.ServiceBilltoCSCCompanyTargetID == find);
    }
    public Row Find_ServiceBilltoCSCCompanyTargetName(string find)
    {
        return rowList.Find(x => x.ServiceBilltoCSCCompanyTargetName == find);
    }
    public List<Row> FindAll_ServiceBilltoCSCCompanyTargetName(string find)
    {
        return rowList.FindAll(x => x.ServiceBilltoCSCCompanyTargetName == find);
    }
    public Row Find_ServiceBilltoCustomerID(string find)
    {
        return rowList.Find(x => x.ServiceBilltoCustomerID == find);
    }
    public List<Row> FindAll_ServiceBilltoCustomerID(string find)
    {
        return rowList.FindAll(x => x.ServiceBilltoCustomerID == find);
    }
    public Row Find_ServiceBilltoID(string find)
    {
        return rowList.Find(x => x.ServiceBilltoID == find);
    }
    public List<Row> FindAll_ServiceBilltoID(string find)
    {
        return rowList.FindAll(x => x.ServiceBilltoID == find);
    }
    public Row Find_ServiceBilltoName(string find)
    {
        return rowList.Find(x => x.ServiceBilltoName == find);
    }
    public List<Row> FindAll_ServiceBilltoName(string find)
    {
        return rowList.FindAll(x => x.ServiceBilltoName == find);
    }
    public Row Find_ServicePO(string find)
    {
        return rowList.Find(x => x.ServicePO == find);
    }
    public List<Row> FindAll_ServicePO(string find)
    {
        return rowList.FindAll(x => x.ServicePO == find);
    }
    public Row Find_ServiceSO(string find)
    {
        return rowList.Find(x => x.ServiceSO == find);
    }
    public List<Row> FindAll_ServiceSO(string find)
    {
        return rowList.FindAll(x => x.ServiceSO == find);
    }
    public Row Find_ServiceSalesRegion(string find)
    {
        return rowList.Find(x => x.ServiceSalesRegion == find);
    }
    public List<Row> FindAll_ServiceSalesRegion(string find)
    {
        return rowList.FindAll(x => x.ServiceSalesRegion == find);
    }
    public Row Find_ProductBilltoGUCompanyTargetID(string find)
    {
        return rowList.Find(x => x.ProductBilltoGUCompanyTargetID == find);
    }
    public List<Row> FindAll_ProductBilltoGUCompanyTargetID(string find)
    {
        return rowList.FindAll(x => x.ProductBilltoGUCompanyTargetID == find);
    }
    public Row Find_ProductBilltoGUCompanyName(string find)
    {
        return rowList.Find(x => x.ProductBilltoGUCompanyName == find);
    }
    public List<Row> FindAll_ProductBilltoGUCompanyName(string find)
    {
        return rowList.FindAll(x => x.ProductBilltoGUCompanyName == find);
    }
    public Row Find_ProductBilltoCSCCompanyTargetID(string find)
    {
        return rowList.Find(x => x.ProductBilltoCSCCompanyTargetID == find);
    }
    public List<Row> FindAll_ProductBilltoCSCCompanyTargetID(string find)
    {
        return rowList.FindAll(x => x.ProductBilltoCSCCompanyTargetID == find);
    }
    public Row Find_ProductBilltoCSCCompanyTargetName(string find)
    {
        return rowList.Find(x => x.ProductBilltoCSCCompanyTargetName == find);
    }
    public List<Row> FindAll_ProductBilltoCSCCompanyTargetName(string find)
    {
        return rowList.FindAll(x => x.ProductBilltoCSCCompanyTargetName == find);
    }
    public Row Find_ProductBilltoCustomerID(string find)
    {
        return rowList.Find(x => x.ProductBilltoCustomerID == find);
    }
    public List<Row> FindAll_ProductBilltoCustomerID(string find)
    {
        return rowList.FindAll(x => x.ProductBilltoCustomerID == find);
    }
    public Row Find_ProductBilltoID(string find)
    {
        return rowList.Find(x => x.ProductBilltoID == find);
    }
    public List<Row> FindAll_ProductBilltoID(string find)
    {
        return rowList.FindAll(x => x.ProductBilltoID == find);
    }
    public Row Find_ProductBilltoName(string find)
    {
        return rowList.Find(x => x.ProductBilltoName == find);
    }
    public List<Row> FindAll_ProductBilltoName(string find)
    {
        return rowList.FindAll(x => x.ProductBilltoName == find);
    }
    public Row Find_ProductPO(string find)
    {
        return rowList.Find(x => x.ProductPO == find);
    }
    public List<Row> FindAll_ProductPO(string find)
    {
        return rowList.FindAll(x => x.ProductPO == find);
    }
    public Row Find_ProductSO(string find)
    {
        return rowList.Find(x => x.ProductSO == find);
    }
    public List<Row> FindAll_ProductSO(string find)
    {
        return rowList.FindAll(x => x.ProductSO == find);
    }
    public Row Find_ShippedDate(string find)
    {
        return rowList.Find(x => x.ShippedDate == find);
    }
    public List<Row> FindAll_ShippedDate(string find)
    {
        return rowList.FindAll(x => x.ShippedDate == find);
    }
    public Row Find_ShippedDateFQ(string find)
    {
        return rowList.Find(x => x.ShippedDateFQ == find);
    }
    public List<Row> FindAll_ShippedDateFQ(string find)
    {
        return rowList.FindAll(x => x.ShippedDateFQ == find);
    }
    public Row Find_ShippedDateFY(string find)
    {
        return rowList.Find(x => x.ShippedDateFY == find);
    }
    public List<Row> FindAll_ShippedDateFY(string find)
    {
        return rowList.FindAll(x => x.ShippedDateFY == find);
    }
    public Row Find_ShiptoGUTargetID(string find)
    {
        return rowList.Find(x => x.ShiptoGUTargetID == find);
    }
    public List<Row> FindAll_ShiptoGUTargetID(string find)
    {
        return rowList.FindAll(x => x.ShiptoGUTargetID == find);
    }
    public Row Find_ShiptoGUName(string find)
    {
        return rowList.Find(x => x.ShiptoGUName == find);
    }
    public List<Row> FindAll_ShiptoGUName(string find)
    {
        return rowList.FindAll(x => x.ShiptoGUName == find);
    }
    public Row Find_ShiptoCSCCompanyTargetID(string find)
    {
        return rowList.Find(x => x.ShiptoCSCCompanyTargetID == find);
    }
    public List<Row> FindAll_ShiptoCSCCompanyTargetID(string find)
    {
        return rowList.FindAll(x => x.ShiptoCSCCompanyTargetID == find);
    }
    public Row Find_ShiptoCSCCompanyTargetName(string find)
    {
        return rowList.Find(x => x.ShiptoCSCCompanyTargetName == find);
    }
    public List<Row> FindAll_ShiptoCSCCompanyTargetName(string find)
    {
        return rowList.FindAll(x => x.ShiptoCSCCompanyTargetName == find);
    }
    public Row Find_ShiptoSiteID(string find)
    {
        return rowList.Find(x => x.ShiptoSiteID == find);
    }
    public List<Row> FindAll_ShiptoSiteID(string find)
    {
        return rowList.FindAll(x => x.ShiptoSiteID == find);
    }
    public Row Find_ShiptoSiteName(string find)
    {
        return rowList.Find(x => x.ShiptoSiteName == find);
    }
    public List<Row> FindAll_ShiptoSiteName(string find)
    {
        return rowList.FindAll(x => x.ShiptoSiteName == find);
    }
    public Row Find_ShiptoAddress1(string find)
    {
        return rowList.Find(x => x.ShiptoAddress1 == find);
    }
    public List<Row> FindAll_ShiptoAddress1(string find)
    {
        return rowList.FindAll(x => x.ShiptoAddress1 == find);
    }
    public Row Find_ShiptoAddress2(string find)
    {
        return rowList.Find(x => x.ShiptoAddress2 == find);
    }
    public List<Row> FindAll_ShiptoAddress2(string find)
    {
        return rowList.FindAll(x => x.ShiptoAddress2 == find);
    }
    public Row Find_ShiptoAddress3(string find)
    {
        return rowList.Find(x => x.ShiptoAddress3 == find);
    }
    public List<Row> FindAll_ShiptoAddress3(string find)
    {
        return rowList.FindAll(x => x.ShiptoAddress3 == find);
    }
    public Row Find_ShiptoAddress4(string find)
    {
        return rowList.Find(x => x.ShiptoAddress4 == find);
    }
    public List<Row> FindAll_ShiptoAddress4(string find)
    {
        return rowList.FindAll(x => x.ShiptoAddress4 == find);
    }
    public Row Find_ShiptoCity(string find)
    {
        return rowList.Find(x => x.ShiptoCity == find);
    }
    public List<Row> FindAll_ShiptoCity(string find)
    {
        return rowList.FindAll(x => x.ShiptoCity == find);
    }
    public Row Find_ShiptoState(string find)
    {
        return rowList.Find(x => x.ShiptoState == find);
    }
    public List<Row> FindAll_ShiptoState(string find)
    {
        return rowList.FindAll(x => x.ShiptoState == find);
    }
    public Row Find_ShiptoPostalCode(string find)
    {
        return rowList.Find(x => x.ShiptoPostalCode == find);
    }
    public List<Row> FindAll_ShiptoPostalCode(string find)
    {
        return rowList.FindAll(x => x.ShiptoPostalCode == find);
    }
    public Row Find_ShiptoCountry(string find)
    {
        return rowList.Find(x => x.ShiptoCountry == find);
    }
    public List<Row> FindAll_ShiptoCountry(string find)
    {
        return rowList.FindAll(x => x.ShiptoCountry == find);
    }
    public Row Find_ShiptoTheater(string find)
    {
        return rowList.Find(x => x.ShiptoTheater == find);
    }
    public List<Row> FindAll_ShiptoTheater(string find)
    {
        return rowList.FindAll(x => x.ShiptoTheater == find);
    }
    public Row Find_KTNNetworkCollected(string find)
    {
        return rowList.Find(x => x.KTNNetworkCollected == find);
    }
    public List<Row> FindAll_KTNNetworkCollected(string find)
    {
        return rowList.FindAll(x => x.KTNNetworkCollected == find);
    }
    public Row Find_KTNEngagementID(string find)
    {
        return rowList.Find(x => x.KTNEngagementID == find);
    }
    public List<Row> FindAll_KTNEngagementID(string find)
    {
        return rowList.FindAll(x => x.KTNEngagementID == find);
    }
    public Row Find_KTNEngagementStart(string find)
    {
        return rowList.Find(x => x.KTNEngagementStart == find);
    }
    public List<Row> FindAll_KTNEngagementStart(string find)
    {
        return rowList.FindAll(x => x.KTNEngagementStart == find);
    }
    public Row Find_KTNCoverageStatus(string find)
    {
        return rowList.Find(x => x.KTNCoverageStatus == find);
    }
    public List<Row> FindAll_KTNCoverageStatus(string find)
    {
        return rowList.FindAll(x => x.KTNCoverageStatus == find);
    }
    public Row Find_KTNCPLStartDate(string find)
    {
        return rowList.Find(x => x.KTNCPLStartDate == find);
    }
    public List<Row> FindAll_KTNCPLStartDate(string find)
    {
        return rowList.FindAll(x => x.KTNCPLStartDate == find);
    }
    public Row Find_KTNCPLEndDate(string find)
    {
        return rowList.Find(x => x.KTNCPLEndDate == find);
    }
    public List<Row> FindAll_KTNCPLEndDate(string find)
    {
        return rowList.FindAll(x => x.KTNCPLEndDate == find);
    }
    public Row Find_InvalidSNReason(string find)
    {
        return rowList.Find(x => x.InvalidSNReason == find);
    }
    public List<Row> FindAll_InvalidSNReason(string find)
    {
        return rowList.FindAll(x => x.InvalidSNReason == find);
    }
    public Row Find_InstanceID(string find)
    {
        return rowList.Find(x => x.InstanceID == find);
    }
    public List<Row> FindAll_InstanceID(string find)
    {
        return rowList.FindAll(x => x.InstanceID == find);
    }
    public Row Find_InstanceCreationDateFiscalYear(string find)
    {
        return rowList.Find(x => x.InstanceCreationDateFiscalYear == find);
    }
    public List<Row> FindAll_InstanceCreationDateFiscalYear(string find)
    {
        return rowList.FindAll(x => x.InstanceCreationDateFiscalYear == find);
    }
    public Row Find_CPLID(string find)
    {
        return rowList.Find(x => x.CPLID == find);
    }
    public List<Row> FindAll_CPLID(string find)
    {
        return rowList.FindAll(x => x.CPLID == find);
    }

    public List<string> GetDistinctValuesCity()
    {
        return bestSiteList.Select(x => x.BestSiteCity).Distinct().ToList();
    }

    public List<string> GetDistinctValuesState()
    {
        return bestSiteList.Select(x => x.BestSiteState).Distinct().ToList();
    }

    public List<string> GetDistinctValuesCountry()
    {
        return bestSiteList.Select(x => x.BestSiteCountry).Distinct().ToList();
    }

    public List<string> GetDistinctValuesTheater()
    {
        return bestSiteList.Select(x => x.BestSiteTheater).Distinct().ToList();
    }

    public List<BestSite> FindByBestSiteParameters(string city, string state, string country, string theater)
    {
        List<BestSite> result = new List<BestSite>(bestSiteList);
        if (city != null && city != "-")
        {
            result = result.FindAll(x => x.BestSiteCity == city);
        }
        if (state != null && state != "-")
        {
            result = result.FindAll(x => x.BestSiteState == state);
        }
        if (country != null && country != "-")
        {
            result = result.FindAll(x => x.BestSiteCountry == country);
        }
        if (theater != null && theater != "-")
        {
            result = result.FindAll(x => x.BestSiteTheater == theater);
        }

        return result;
    }

    public List<Row> FindByBestSite(BestSite bestSite)
    {
        List<Row> result = rowList.FindAll(x => x.bestSite == bestSite);
        return result;
    }
}